{
  "openapi": "3.0.0",
  "info": {
    "version": "1.6.8",
    "title": "People REST API",
    "description": "An attempt to make a best practices pattern",
    "contact": {
      "name": "Stuart Williams",
      "email": "stuart.williams@outlook.com",
      "url": "https://github.com/BlitzkriegSoftware/NodeJsPersonApi"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/BlitzkriegSoftware/NodeJsPersonApi/blob/main/LICENSE"
    }
  },
  "servers": [
    {
      "url": "http://localhost:30083"
    },
    {
      "url": "https://localhost:30083"
    }
  ],
  "paths": {
    "/person/list": {
      "get": {
        "summary": "Gets all people",
        "description": "",
        "responses": {
          "200": {
            "description": "Returns People",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/People"
                }
              }
            }
          }
        }
      }
    },
    "/person/samples/{count}": {
      "post": {
        "summary": "Makes N sample people and adds them to DATA (default: 5)",
        "description": "",
        "parameters": [
          {
            "name": "count",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Creates {count} people",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/People"
                }
              }
            }
          }
        }
      }
    },
    "/person/{id}": {
      "get": {
        "summary": "Gets person by ID or 404 w. Status",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns PERSON"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "Deletes an existing PERSON by ID",
        "description": "Returns status message",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted status"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/person/": {
      "post": {
        "summary": "Add/Update PERSON",
        "description": "Returns Status message",
        "responses": {
          "200": {
            "description": "Updated w. Status"
          },
          "201": {
            "description": "Created w. Status"
          },
          "400": {
            "description": "Bad Person w. Status"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        }
      }
    },
    "/about": {
      "get": {
        "summary": "About this API",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/openapi3": {
      "get": {
        "summary": "OpenApi3 JSON Definition (swagger)",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "unique integer identity"
          },
          "firstname": {
            "type": "string",
            "example": "first name"
          },
          "lastname": {
            "type": "string",
            "example": "last name"
          },
          "cellphone": {
            "type": "string",
            "example": "cell phone"
          },
          "company": {
            "type": "string",
            "example": "company"
          },
          "email": {
            "type": "string",
            "example": "email"
          }
        },
        "required": [
          "id",
          "firstname",
          "lastname"
        ]
      },
      "People": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "array"
          },
          "items": {
            "$ref": "#/components/schemas/Person"
          }
        }
      }
    }
  }
}